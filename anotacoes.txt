SPA (Single Page Application) || HTML vazio pois é inserido por meio do JavaScript
O conteúdo é inserido através do JavaScript por meio do React, não contendo nada no index.html do que é visto no site



Vantagens de uso de SPAs = 
    - Velocidade, ja que o HTML não possui conteúdo, tornando algo mais rápido;



State (Estado) é uma variável que você pode alterar no React que faz com que o COMPONENTE seja RENDERIZADO novamente, seja executada novamente. É útil caso vc queira fazer algo com a resposta da interação do usuário

STATE É ALGO IMPORTANTE



<div className="w-screen h-screen bg-slate-500 flex justify-center p-6"> 
w-screen = width screen
h-screen = height screen
bg-slate-500 = cor do background cinza
flex = display flex
justify-center = centralizar tudo
p-6 = padding de 24 pixels



<div className="w-[500px] text-center">
w-[500px] = width de 500 pixels
text-center = centralizar o texto



<Tasks tasks={tasks}/>
A prop tasks vai ser o state {tasks} (id, title, etc.)



function Tasks(props) {
    return (
        <ul className="space-y-4">
            {props.tasks.map((task) => (
                <li key={task.id} className="bg-slate-400 text-white p-2 rounded-md">{task.title}</li>
            ))}
        </ul>
    );
}

RETORNA EM FORMATO DE LISTA A 'TITLE' DE CADA TASK UTILIZANDO O MAP PARA FAZER A VARREDURA E RETORNAR
A KEY É USADO PARA QUE HAJA UMA MELHORA NA PERFOMANCE PENSANDO MAIS A FRENTE, A KEY TEM QUE SER ALGO UNICO PARA IDENTIFICAÇÃO



function onTaskClick(taskId) {
  const newTasks = tasks.map(task => { || VARREDURA PARA PODER MARCAR A TASK PELO ID SETADO PELO COMANDO KEY
    // PRECISO ATUALIZAR ESSA TAREFA
    if (task.id == taskId) { || SE O ID DA TAREFA ATUAL DA ITERAÇÃO FOR O MESMO ID DA TAREFA CLICADA, ENTRA NO IF
      return {...task, isCompleted: !task.isCompleted} || LE TODAS AS PROPRIEDADES DA TASK E ALTERA O VALOR DO isCompleted PARA O VALOR QUE NÃO ESTÁ SELECIONADO, (POSITIVO PARA NEGATIVO) (NEGATIVO PARA POSITIVO)
    }
    return task;
  })
}
FUNÇÃO PARA ALTERNAR A TASK ENTRE FEITO E NÃO FEITO



// Pegará as informações através da URL e usará elas para retornar algo ao usuário 
function TaskPage() {
    const [searchParams] = useSearchParams(); || QUERY PARA OBTER AS INFORMAÇÕES DE TITLE E DESCRIPTION
    const title = searchParams.get("title"); 
    const description = searchParams.get("description")
    return (<div className="w-screen h-screen bg-slate-500 flex justify-center p-6">
        <h1>{title}</h1> || ESTÁ MOSTRANDO O CONTEUDO 'TITLE' QUE ESTÁ NA URL
        <p>{description}</p> || ESTÁ MOSTRANDO O CONTEUDO 'DESCRIPTION' QUE ESTÁ NA URL
    </div>);
}



useEffect(() => {}, []); || RECEBE COMO PARAMETRO UMA FUNÇÃO E UMA LISTA, ONDE A FUNÇÃO SOH VAI SER EXECUTADA CASO HAJA ALGUMA MUDANÇA NA LISTA QUE FOI USADA COMO PARAMETRO


useEffect(() => {}, []); || CASO A FUNÇÃO DO USEEFFECT RECEBA UMA LISTA VAZIA COMO PARAMETRO, ELA IRÁ APENAS EXECUTAR A PRIMEIRA FUNÇÃO NA SUA PRIMEIRA VISITA DO SITE, TENDO EM VISTA QUE A LISTA NUNCA MAIS VAI SER VAZIA.


useEffect(() => {
  localStorage.setItem("tasks", JSON.stringify(tasks))
}, [tasks]); || "TASKS" O NOME QUE É USADO PARA IDENTIFICAR O DADO QUE ESTÁ SENDO ARMAZENADO, E O SEGUNDO PARÂMETRO É O QUE QUER ADICIONAR, USANDO O JSON.STRIGIFY ELE CONVERTE O OBJETO TASKS PARA UMA STRING 
// ESSE MÉTODO NÃO É UTILIZADO POIS DESSE JEITO É DE JEITO LOCAL, E OS SITES NAO TERIAM COMO ARMAZENAR ESSES TIPOS DE DADOS DESSA MANEIRA, NECESSITANDO DE UMA API




function App() {
  const [tasks, setTasks] = useState([{
    id: 1,
    title: "Arrumar shows site",
    description: "Arrumar e deletar shows que já aconteceram",
    isCompleted: false
  },
  {
    id: 2,
    title: "Estudar programação",
    description: "Realizar os cursos",
    isCompleted: false
  },
  {
    id: 3,
    title: "Verificar ingressos",
    description: "Verificar banco de dados sobre tal cliente",
    isCompleted: false
  },
]);

function App() {
  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem("tasks")) || []);
// USADO PARA ARMAZENAR AS INFORMAÇÕES ATRAVÉS DA KEY "tasks" MESMO APÓS DAR REFRESH NA PAGINA
// NO FUTURO USARÁ ESSA FUNÇÃO PARA ARMAZENAR DADOS ATRAVÉS DE APIs



useEffect(() => {
  const response = await fetch('https://jsonplaceholder.typicode.com/todos?_limit=10')
  });
  const data = await response.json(); || CONVERTE OS DADOS RECEBIDOS PELA API PARA JSON, JA QUE O FETCH NAO CONVERTE OS DADOS RECEBIDOS PARA FETCH
   || LIMITANDO A 10 O NUMEROS DE "TO DOS" QUE ELE ARMAZENARÁ EM RESPONSE DA API, POR PADRÃO ELE RECEBE PELO MÉTODO 'GET'



  useEffect(() => {
  async function fetchTasks() {
    const response = await fetch('https://jsonplaceholder.typicode.com/todos?_limit=10', 
      {
      method: 'GET'
      });
    const data = await response.json();
    console.log(data);
  }
  fetchTasks();
});
// JÁ QUE ESTÁ SENDO UTILIZADO O AWAIT É NECESSÁRIO CRIAR UMA FUNÇÃO ASYNC DENTRO DO USE EFFECTS, CHAMANDO ESSA FUNÇÃO AO FINAL DO CÓDIGO PARA QUE FUNCIONE

SE HOUVER MUITA REPETIÇÃO NA NAMECLASS É POSSIVEL CRIAR UM COMPONENTE PARA EVITAR A REPETIÇÃO 



function Input(props) {
    return (
        <input 
            type={props.type} 
            placeholder={props.placeholder}
            className="border border-slate-300 outline-slate-400 px-4 py-2 rounded-md"
            value = {props.value}
            onChange={props.onChange}
        />
    )
}
ESSA FUNÇÃO QUE SE ENCONTRA NO COMPONENTE "Input.jsx" TEM COMO FINALIDADE DEFINIR UM PADRÃO DO CLASSNAME PARA TODOS INPUT QUE TIVEREM NO CÓDIGO, QUE NESSE CASO SE ENCONTRA NO 'AddTasks.jsx', SETANDO UM PADRÃO APENAS PRO CLASSNAME, TENDO EM VISTA QUE É NECESSÁRIO RECEBER O PARAMETRO 'props' PARA QUE NÃO ESTABELEÇA UM PADRÃO PARA OS OUTROS (type, placeholder, value, onChange)